//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class PlayGround
{
    public IEnumerable<Box> Box { get; set; }
    public Player Player { get; set; }
    public List<Box> Boxes { get; set; }
    public Dictionary<string, Square> PlayField { get; set; }
    private bool levelComleted;
    private string currSquareID;
    private string[] textFile;

    public PlayGround()
    {
        Player = new Player();
        PlayField = new Dictionary<string, Square>();
        currSquareID = "0:0";
        Boxes = new List<Box>();
    }

    public bool CheckLevelCompleted()
    {
        foreach (Box box in Boxes)
        {
            if (!box.StandsOnGoal)
            {
                return;
            }
        }
        levelComleted = true;
        Console.WriteLine("level completet");
    }

    public void ResetPuzzle()
    {
        PlayField.Clear();
        Boxes.Clear();
    }

    public void CheckMoveValid(string newSquareID, string SquareNextToNewSquareID)
    {
        bool valid = false;
        Square toMoveSquare; // represents the square the player wants to stand on
        PlayField.TryGetValue(newSquareID, out toMoveSquare);
        Square nextSquare = null; // represent the next square from toMoveSquare, necessary for moving a box

        if (toMoveSquare.Available)
        {
            if (toMoveSquare.Box != null) // if the square contains a box
            {
                // find out whether the next square the box has to move to is available
                PlayField.TryGetValue(SquareNextToNewSquareID, out nextSquare);
                if (nextSquare.Available && nextSquare.Box == null)
                {
                    valid = true;
                }

            } else // the square does not contain a box
            {
                valid = true;
            }
        }
        Console.WriteLine(valid);

        if (valid)
        {
            this.UpdatePlayGround(toMoveSquare, nextSquare);
        }
    }

    public void GenerateLevel(int level)
    {
        var projectPath = Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase)));
        var fullPath = new Uri(projectPath + @"\Doolhof\doolhof" + level + ".txt").LocalPath;

        // Bevat het level(speelveld)
        textFile = File.ReadAllLines(fullPath);

        int row = 0;
        int column = 0;
        char[] squares;
        Square newSquare = null;

        foreach (string line in textFile)
        {
            squares = line.ToCharArray();

            foreach (char square in squares)
            {
                switch(square)
                {
                    case '#':
                        newSquare = new WallSquare(row, column);
                        row++;
                        break;

                    case '.':
                        newSquare = new NormalSquare(row, column);
                        row++;
                        break;

                    case '@':
                        newSquare = new NormalSquare(row, column);
                        newSquare.Player = Player;
                        Player.Square = newSquare;
                        row++;
                        Console.WriteLine(newSquare.ID + " contains the player");
                        break;

                    case 'x':
                        newSquare = new GoalSquare(row, column);
                        row++;
                        break;

                    case 'o':
                        newSquare = new NormalSquare(row, column);
                        Box box = new Box();
                        newSquare.Box = box;
                        box.Square = newSquare;
                        Boxes.Add(box); // add box to the array
                        row++;
                        break;

                    default: // add empty square
                        PlayField.Add("e" + row + ":" + column, null); // indicate an emty square should be written
                        row++;
                        break;
                } // end switch

                if (newSquare != null)
                {
                    PlayField.Add(newSquare.ID, newSquare);
                }
                newSquare = null;
            } // end for-loop -> for each char in string
            column++;
            row = 0;
            PlayField.Add("n" + row + ":" + column, null); // indicate an enter has to be written
        } // end for-loop -> for each string in string[]
        this.printField();
    }

    public void printField()
       
    {
        Console.WriteLine("PrintField");

        foreach (var square in PlayField)
        {

            if (square.Key.Substring(0,1).Equals("n"))
            {
                Console.WriteLine(); // print enter
            } else if (square.Key.Substring(0,1).Equals("e"))
            {
                Console.Write(" "); // print emtpy square
            } else // normal square
            {
                square.Value.print();
            }
        }
    }

    public void UpdatePlayGround(Square toMoveSquare, Square nextSquare)
    {
        if (toMoveSquare.Box != null) // the new square contains a box
        {
            nextSquare.Box = toMoveSquare.Box;
            nextSquare.Box.Square = nextSquare;
            toMoveSquare.RemoveMovableObject();

            if (nextSquare is GoalSquare)
            {
                nextSquare.Box.StandsOnGoal = true;
            } else
            {
                nextSquare.Box.StandsOnGoal = false;
            }
        }

        Player.Square.RemoveMovableObject();
        Player.Square = toMoveSquare;
        Player.Square.Player = Player;

        this.printField();
        this.CheckLevelCompleted();
    }

    public void DisplayPlayingField()
    {
        foreach (var l in textFile)
            Console.WriteLine(l);

        foreach (KeyValuePair<string, Square> entry in PlayField)
        {
            
        }
    }

    public void Move(ConsoleKeyInfo pressedKey)
    {
        string newSquareID = null; // represents the square the player want to move to
        string squareNextToNewSquareID = null; // represent the next square from toMoveSquare, necessary for moving a box

        switch (pressedKey.Key)
        {
            // Change the ID of the squares(currSquareID)
			case ConsoleKey.UpArrow:
                Console.WriteLine("UP");
                newSquareID = Player.Square.Row + ":" + (Player.Square.Column - 1);
                squareNextToNewSquareID = Player.Square.Row + ":" + (Player.Square.Column - 2);
                break;
            case ConsoleKey.DownArrow:
                Console.WriteLine("DOWN");
                newSquareID = Player.Square.Row + ":" + (Player.Square.Column + 1);
                squareNextToNewSquareID = Player.Square.Row + ":" + (Player.Square.Column + 2);
                break;
            case ConsoleKey.LeftArrow:
                Console.WriteLine("LEFT");
                newSquareID = (Player.Square.Row - 1) + ":" + Player.Square.Column;
                squareNextToNewSquareID = (Player.Square.Row - 2) + ":" + Player.Square.Column;
                break;
            case ConsoleKey.RightArrow:
                Console.WriteLine("RIGHT");
                newSquareID = (Player.Square.Row + 1) + ":" + Player.Square.Column;
                squareNextToNewSquareID = (Player.Square.Row + 2) + ":" + Player.Square.Column;
                break;
        }

        if (newSquareID != null)
        {
            this.CheckMoveValid(newSquareID, squareNextToNewSquareID);
        }
    }

}

