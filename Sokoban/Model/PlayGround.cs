//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class PlayGround
{
    public Spike spike { get; set; }
    public List<Box> Boxes { get; set; }
    public Dictionary<string, Square> PlayField { get; set; }
    private bool levelCompleted;
    private string[] textFile;
    private int currLevel;
    private GameController gameController;

    public PlayGround(GameController gameController)
    {
        spike = new Spike();
        PlayField = new Dictionary<string, Square>();
        Boxes = new List<Box>();
        this.gameController = gameController;
    }

    public bool CheckLevelCompleted()
    {
        foreach (Box box in Boxes)
            if (!box.StandsOnGoal)
                return false;

        Console.WriteLine("Level completed");
        levelCompleted = true;

        PlayField.Clear();

        return levelCompleted;
    }

    private void ResetPuzzle()
    {
        PlayField.Clear();
        Boxes.Clear();
        levelCompleted = false;
    }
    
    public void GenerateLevel(int level)
    {
        currLevel = level;
        var projectPath = Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase)));
        var fullPath = new Uri(projectPath + @"\Doolhof\doolhof" + level + ".txt").LocalPath;

        // Bevat het level(speelveld)
        textFile = File.ReadAllLines(fullPath);

        int row = 0;
        int column = 0;
        char[] squares;
        Square newSquare = null;

        foreach (string line in textFile)
        {
            squares = line.ToCharArray();

            foreach (char square in squares)
            {
                switch (square)
                {
                    case '#':
                        newSquare = new WallSquare(row, column);
                        row++;
                        break;

                    case '.':
                        newSquare = new NormalSquare(row, column);
                        row++;
                        break;

                    case '@':
                        newSquare = new NormalSquare(row, column);
                        newSquare.MovableObject = spike;
                        spike.Square = newSquare;
                        row++;
                        Console.WriteLine(newSquare.ID + " contains the spike");
                        break;

                    case 'x':
                        newSquare = new GoalSquare(row, column);
                        row++;
                        break;

                    case 'o':
                        newSquare = new NormalSquare(row, column);
                        Box box = new Box();
                        newSquare.MovableObject = box;
                        box.Square = newSquare;
                        Boxes.Add(box); // add box to the array
                        row++;
                        break;

                    default: // add empty square
                        PlayField.Add("e" + row + ":" + column, null); // indicate an emty square should be written
                        row++;
                        break;
                } // end switch

                if (newSquare != null)
                    PlayField.Add(newSquare.ID, newSquare);

                newSquare = null;
            } // end for-loop -> for each char in string
            column++;
            row = 0;
            PlayField.Add("n" + row + ":" + column, null); // indicate an enter has to be written
        } // end for-loop -> for each string in string[]
        gameController.PrintField(PlayField);
    }

    public void UpdatePlayRound(Square toMoveSquare, Square nextSquare)
    {
        gameController.PrintField(PlayField);
        this.CheckLevelCompleted();
    }
    //////////////////////////////////////////////////////////////// the method below has to be deleted
                                                                  // the gameController has to invoke the
                                                                  // moveUp/moveDown/moveRight/moveLeft method
                                                                  // of the Spike / Collaborator
    public void ProcessUserInput(ConsoleKeyInfo pressedKey)
    {
        string newSquareID = null; // represents the square the player want to move to
        string squareNextToNewSquareID = null; // represent the next square from toMoveSquare, necessary for moving a box

        switch (pressedKey.Key)
        {
            // Change the ID of the squares(currSquareID)
            case ConsoleKey.UpArrow:
                newSquareID = spike.Square.Row + ":" + (spike.Square.Column - 1);
                squareNextToNewSquareID = spike.Square.Row + ":" + (spike.Square.Column - 2);
                break;
            case ConsoleKey.DownArrow:
                newSquareID = spike.Square.Row + ":" + (spike.Square.Column + 1);
                squareNextToNewSquareID = spike.Square.Row + ":" + (spike.Square.Column + 2);
                break;
            case ConsoleKey.LeftArrow:
                newSquareID = (spike.Square.Row - 1) + ":" + spike.Square.Column;
                squareNextToNewSquareID = (spike.Square.Row - 2) + ":" + spike.Square.Column;
                break;
            case ConsoleKey.RightArrow:
                newSquareID = (spike.Square.Row + 1) + ":" + spike.Square.Column;
                squareNextToNewSquareID = (spike.Square.Row + 2) + ":" + spike.Square.Column;
                break;
            case ConsoleKey.S:
                this.ResetPuzzle();
                Console.Clear();
                new GameController().SetupGame();
                break;
            case ConsoleKey.R:
                // Reset properties
                this.ResetPuzzle();
                GenerateLevel(currLevel);
                break;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////////// remove
}

