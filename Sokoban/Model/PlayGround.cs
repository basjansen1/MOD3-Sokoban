//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Sokoban.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class PlayGround
{
    public Spike Spike { get; set; }
    public Collaborator Collaborator { get; set; }
    public List<Box> Boxes { get; set; }
    public Dictionary<string, Square> PlayField { get; set; }
    public bool levelCompleted;
    private string[] textFile;
    private int currLevel;
    private GameController gameController;

    public PlayGround(GameController gameController)
    {
        Spike = new Spike();
        Collaborator = new Collaborator();
        PlayField = new Dictionary<string, Square>();
        Boxes = new List<Box>();
        this.gameController = gameController;
    }

    public bool CheckLevelCompleted()
    {
        foreach (Box box in Boxes)
            if (!box.StandsOnGoal)
                return false;

        Console.WriteLine("Level completed");
        levelCompleted = true;

        PlayField.Clear();

        return levelCompleted;
    }

    private void ResetPuzzle()
    {
        PlayField.Clear();
        Boxes.Clear();
        levelCompleted = false;
    }
    
    public void GenerateLevel(int level)
    {
        currLevel = level;
        var projectPath = Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase)));
        var fullPath = new Uri(projectPath + @"\Doolhof\doolhof" + level + ".txt").LocalPath;

        // Bevat het level(speelveld)
        textFile = File.ReadAllLines(fullPath);

        int row = 0;
        int column = 0;
        char[] squares;
        Square newSquare = null;

        foreach (string line in textFile)
        {
            squares = line.ToCharArray();

            foreach (char square in squares)
            {
                switch (square)
                {
                    case '#':
                        newSquare = new WallSquare(row, column);
                        row++;
                        break;

                    case '.':
                        newSquare = new NormalSquare(row, column);
                        row++;
                        break;

                    case '@':
                        newSquare = new NormalSquare(row, column);
                        newSquare.addMovableObject(Spike);
                        Spike.Square = newSquare;
                        Spike.Square.CalculateShape();
                        row++;
                        break;

                    case 'x':
                        newSquare = new GoalSquare(row, column);
                        row++;
                        break;

                    case 'o':
                        newSquare = new NormalSquare(row, column);
                        Box box = new Box();
                        newSquare.addMovableObject(box);
                        box.Square = newSquare;
                        box.Square.CalculateShape();
                        Boxes.Add(box); // add box to the array
                        row++;
                        break;

                    case '~':
                        newSquare = new PitFallSquare(row, column);
                        row++;
                        break;

                    case '$':
                        newSquare = new NormalSquare(row, column);
                        newSquare.addMovableObject(Collaborator);
                        Collaborator.Square = newSquare;
                        Collaborator.Square.CalculateShape();
                        row++;
                        break;

                    default: // add empty square
                        PlayField.Add("e" + row + ":" + column, null); // indicate an emty square should be written
                        row++;
                        break;
                } // end switch

                if (newSquare != null)
                    PlayField.Add(newSquare.ID, newSquare);

                newSquare = null;
            } // end for-loop -> for each char in string
            column++;
            row = 0;
            PlayField.Add("n" + row + ":" + column, null); // indicate an enter has to be written
        } // end for-loop -> for each string in string[]
        gameController.PrintField(PlayField);
    }

    public void UpdatePlayRound()
    {
        gameController.PrintField(PlayField);
        this.CheckLevelCompleted();
        Console.WriteLine("**** CALLELD ");
        Collaborator.CalculateAwake();
    }

    public void RemoveBoxFromPlayGround(Box box)
    {
        this.Boxes.Remove(box);
    }
}

